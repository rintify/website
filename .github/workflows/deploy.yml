name: Deploy

on:
  push:
    branches: ['main']

jobs:
  build-on-vps:
    runs-on: ubuntu-latest
    steps:
      - name: SSH into VPS and deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            set -e
            mkdir -p /srv/website
            cd /srv/website

            if [ ! -d app/.git ]; then
              git clone https://github.com/rintify/website.git app
            fi

            mkdir app/uploads

            cat > Caddyfile <<EOF
            ${{ secrets.NEXTAUTH_URL }}, www.${{ secrets.NEXTAUTH_URL }} {
              encode gzip
              reverse_proxy web:3000
            }
            EOF

            cat > docker-compose.yml <<EOF
            services:
              web:
                build:
                  context: ./app
                  target: runner
                restart: unless-stopped
                environment:
                  - NODE_ENV=production
                  - PORT=3000
                  - HOSTNAME=0.0.0.0
                  - DATABASE_URL=file:/data/sqlite.db
                  - NEXTAUTH_URL=https://${{ secrets.NEXTAUTH_URL }}
                  - NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
                volumes:
                  - app-data:/data
                command: >
                  sh -c "
                    if [ ! -d ./prisma/migrations ]; then
                      npx prisma migrate dev --name init;
                    fi &&
                    npx prisma migrate deploy &&
                    node server.js
                  "

                networks: [webnet]

              caddy:
                image: caddy:2
                restart: unless-stopped
                ports: ["80:80","443:443"]
                volumes:
                  - ./Caddyfile:/etc/caddy/Caddyfile:ro
                  - caddy-data:/data
                  - caddy-config:/config
                depends_on: [web]
                networks: [webnet]

            networks:
              webnet:

            volumes:
              app-data:
              caddy-data:
              caddy-config:
            EOF

            cd app
            git fetch --depth=1 origin main
            git checkout -f main
            git reset --hard origin/main
            cd ..
            docker compose build --pull web
            docker compose up -d --remove-orphans
            docker image prune -f
